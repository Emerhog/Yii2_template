DISTINCT 'cars' - только уникальные(в отличии от GROUP BY нельзя подсчитать name = count)
__________________________________________________________
select 'cars' COUNT('cars') from 'cars' GROUP BY 'cars' - уникальные и их кол-во
__________________________________________________________
COUNT(DISTINCT 'cars') - количество уникальных
SUM('salary') - сумма всех зарплат
AVG('salary') - среднее значение всех зарплат
ANY_VALUE('cars') - любые значения из табл.
MIN('salary') - мин. значение
MAX('salary') - макс. значение
__________________________________________________________
HAVING - это тоже самое что WHERE но срабатывает на результирующей таблице(т.е в конце)
__________________________________________________________
INNER JOIN 'price' ON 'users.id' = 'cars.id' - вывести прайс только где равны айди
LEFT JOIN 'price' ON 'users.id' = 'cars.id' - выводит ВСЁ из 1 таблицы, подставляет 2(если нет схожих то = NULL)
RIGHT JOIN 'price' ON 'users.id' = 'cars.id' - обратное LEFT JOIN
__________________________________________________________
select 'name' from 'cars'
UNION				- UNION создаст 1 таблицу с именами машин и людей
select 'name' from 'users'	  (кол-во столбцов должно быть одинаково в 2 запросах, любые типы данных)
__________________________________________________________
FROM_UNIXTIME('time') - при time = 12301230123 сек. Ответ: 2018-10-21 12:06:45
DAY/MINUTE/HOUR(2018-10-21 12:06:45) 		    Ответ: чило, результат первода UNIXTIME в дни/минуты/часы
Т.е переводит секунды в человекочитаемое время
__________________________________________________________
ALIASES - псевдонимы. Переименовывание столбца результата запроса (AS 'time')
__________________________________________________________
LIMIT - количество продукта
OFFSET - смещение(типо страницы) от 0 до N
__________________________________________________________
ASC/DESC - сортировка от большего к меньшему и наоборот